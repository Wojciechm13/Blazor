@page "/viewPeople"
@using Assignment1.Data
@using Microsoft.AspNetCore.Mvc.Filters
@using Models
@using System.Security.Cryptography.X509Certificates
@using System.Net.Security
@using System.Net
@inject IAddPersonService AddPersonService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider


<h3>ViewPeople</h3>

<p>
    Filter by User name:  <input type="text" @oninput="@((arg) => Filter(arg))" style="width:150px"/>
</p>

@if (persons == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!persons.Any())
{
    <p>
        <em>No Person items exist. Please add some.</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Id</th>
            <th>First name</th>
            <th>Last name</th>
            <th>Hair color</th>
            <th>Eye coloe</th>
            <th>Age</th>
            <th>Weight</th>
            <th>Height</th>
            <th>Sex</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in peopleToShow)
        {
            <tr>
                <td>@item.Id</td>
                <td>@item.FirstName</td>
                <td>@item.LastName</td>
                <td>@item.HairColor</td>
                <td>@item.EyeColor</td>
                <td>@item.Age</td>
                <td>@item.Weight</td>
                <td>@item.Height</td>
                <td>@item.Sex</td>
                <td>
                <button @onclick="@(() => RemovePerson(item.Id))">
                    <i class="oi oi-trash" style="color:red"/>
                </button>
                
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private IList<Person> persons;
    private IList<Person> peopleToShow;
    
    
    


    private void Filter(ChangeEventArgs changeEventArgs)
    {
        string? filterByName = "";
        try
        {
            filterByName = changeEventArgs.Value.ToString();
        }
        catch (Exception e){}
        if (filterByName != "")
        {
            peopleToShow = persons.Where(t => t.FirstName == filterByName).ToList();
        }
        else
        {
            peopleToShow = persons;
        }
    }
    
    
    /*private void Filter(ChangeEventArgs changeEventArgs) {
        int? filterById = null;
        try {
            filterById = int.Parse(changeEventArgs.Value.ToString());
        } catch (Exception e) { }
        if (filterById != null) {
            peopleToShow = persons.Where(t => t.Id == filterById).ToList();
        } else {
            peopleToShow = persons;
        }
    }
    */

    protected override async Task OnInitializedAsync()
    {
        persons = await AddPersonService.GetPersonsAsync();
        peopleToShow = persons;
        
        base.OnInitialized();
        var user = (await AuthStat).User;
        if (!user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo($"/login");
        }
    }

    private async Task RemovePerson(int personId)
    {
        Person personToRemove = persons.First(t => t.Id == personId);
        await AddPersonService.RemovePersonAsync(personId);
        persons.Remove(personToRemove);
    }
    
    
    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }

   

}